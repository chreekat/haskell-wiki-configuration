<?php

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.

# We define this to allow the configuration file to be explicitly 
# located in /etc/mediawiki.
# Change this if you are setting up multisite wikis on your server.
define('MW_INSTALL_PATH','/var/lib/mediawiki');

if( defined( 'MW_INSTALL_PATH' ) ) {
	$IP = MW_INSTALL_PATH;
} else {
	$IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
# ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

include_once('/external_includes/mysql_pw.php');

$wgSitename         = "HaskellWiki";

// $wgReadOnly = "Server maintenance in progress";
// $wgReadOnly = "Server migration in progress";
// $wgReadOnly = "Dumping database, access will be restored shortly";
$wgShowExceptionDetails = true;

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
$wgScriptPath       = "/haskellwiki";
$wgScriptExtension  = ".php";

## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL

$wgBreakFrames      = false;

$wgArticlePath      = "/$1";
$wgUsePathInfo      = true;
$wgScriptPath       = "";
$wgScriptExtension  = ".php";

$wgLogo             = "/wikistatic/haskellwiki_logo.png";

$wgEnableEmail      = true;
$wgEnableUserEmail  = true;

$wgEmergencyContact = "haskell-cafe@haskell.org";
$wgPasswordSender = "haskell-cafe@haskell.org";

## For a detailed description of the following switches see
## http://www.mediawiki.org/wiki/Extension:Email_notification 
## and http://www.mediawiki.org/wiki/Extension:Email_notification
## There are many more options for fine tuning available see
## /includes/DefaultSettings.php
## UPO means: this is also a user preference option
$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;
$wgEmailConfirmToEdit = true;

$wgDBtype           = "mysql";

# Secrets removed
# $wgDBserver, $wgDBname, $wgDBuser, $wgDBpassword

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "TYPE=InnoDB";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;

# Postgres specific settings
$wgDBport           = "5432";
$wgDBmwschema       = "mediawiki";
$wgDBts2schema      = "public";

## Shared memory settings
$wgMainCacheType = CACHE_MEMCACHED;
$wgMemCachedServers = array( "127.0.0.1:11211" );
$wgSessionsInObjectCache = true;
$wgSessionCacheType = CACHE_MEMCACHED;
$wgSessionsInMemcached = true;
$wgCacheDirectory = "$IP/cache";
$wgEnableSidebarCache = true;

$wgDisableCounters=true;

#$wgUseSquid = true;
#$wgUseESI = true;
#$wgSquidServers = array( '127.0.0.1:9101' );
#$wgUseFileCache = true;
#$wgFileCacheDirectory = "$IP/cache";

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgCheckFileExtensions          = false;
$wgStrictFileExtensions         = false;
$wgUploadSizeWarning            = 0;
$wgUseImageResize               = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# Don't allow anonymous users to edit
$wgGroupPermissions['*']['edit'] = false;
# Whether to allow anonymous users to create accounts
$wgGroupPermissions['*']['createaccount'] = false;

# The createaccount group, for users who can always create accounts
$wgAvailableRights[] = 'createaccount';
$wgGroupPermissions['createaccount']['createaccount'] = true;

$wgSpamRegex = "[Ll]ouis ?[Vv]uitton";

$wgShowIPinHeader = false;
$wgPutIPinRC = true;

$wgLocaltimezone = "UTC";

$wgNamespacesWithSubpages[NS_MAIN] = true;
$wgNamespacesWithSubpages[NS_PROJECT] = true;
$wgNamespacesWithSubpages[NS_TEMPLATE] = true;
$wgNamespacesWithSubpages[NS_CATEGORY] = true;
$wgNamespacesWithSubpages[NS_HELP] = true;

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

$wgUploadPath = "/wikiupload";
$wgUploadDirectory = "/home/www/wikidata/upload";

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = true;
$wgMathPath         = "{$wgUploadPath}/math";
$wgMathDirectory    = "{$wgUploadDirectory}/math";
$wgTmpDirectory     = "{$wgUploadDirectory}/tmp";

$wgAllowExternalImages = true;

$wgLocalInterwiki   = $wgSitename;

$wgLanguageCode = "en";

# Secret removed
#$wgSecretKey

## Register skins

wfLoadSkin( 'Vector' );
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Hawiki' );

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':

#$wgStyleDirectory = '/home/www/wikidata/skin/';
$wgStylePath = '/skins';
$wgValidSkinNames = array('monobook' => 'MonoBook', 'hawiki' => 'Hawiki', 'vector' => 'Vector');
$wgDefaultSkin = 'hawiki';
#$wgDefaultUserOptions['numberheadings'] = 1;

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgEnableCreativeCommonsRdf = true;
$wgRightsPage = "HaskellWiki:Copyrights"; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "https://wiki.haskell.org/HaskellWiki:Copyrights";
$wgRightsText = "simple permissive license";
# $wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

# # Profiling:
# /** Only record profiling info for pages that took longer than this */
# $wgProfileLimit = 0.0;
# /** Don't put non-profiling info into log file */
# $wgProfileOnly = false;
# /** Log sums from profiling into "profiling" table in db. */
# $wgProfileToDatabase = false;
# /** If true, print a raw call tree instead of per-function report */
# $wgProfileCallTree = false;
# /** Should application server host be put into profiling table */
# $wgProfilePerHost = false;
# /* Log file */
# $wgDebugLogFile = "/srv/web/wikidata/log.txt";

# NO LONGER RECOMMENDED debian specific include (see https://www.mediawiki.org/wiki/User:Legoktm/Packages for explanation):
#if (is_file("/etc/mediawiki-extensions/extensions.php")) {
#        include( "/etc/mediawiki-extensions/extensions.php" );
#}

# Secrets removed
# $wgReCaptchaPublicKey, $wgReCaptchaPrivateKey

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

# Load desired extensions (post mw 1.25 method)

wfLoadExtension( 'Cite' );
wfLoadExtension( 'SyntaxHighlight_GeSHi' );
wfLoadExtension( 'Math' );
#wfLoadExtension( 'Wikidiff2' );
wfLoadExtension( 'Interwiki' );
wfLoadExtension( 'WikiEditor' );
wfLoadExtension( 'CiteThisPage' );
wfLoadExtension( 'ConfirmEdit' );
wfLoadExtension( 'Gadgets' );
wfLoadExtension( 'ImageMap' );
wfLoadExtension( 'InputBox' );
wfLoadExtension( 'LocalisationUpdate' );
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'ParserFunctions' );
wfLoadExtension( 'Poem' );
wfLoadExtension( 'Renameuser' );
wfLoadExtension( 'SpamBlacklist' );
wfLoadExtension( 'TitleBlacklist' );
wfLoadExtension( 'CollapsibleVector' );
wfLoadExtension( 'SyntaxHighlight_GeSHi_HaskellAlias' )

unset( $wgFooterIcons['poweredby'] );
